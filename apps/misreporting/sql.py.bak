'''sql queries'''
from django.db import connection
from django.db.models import When, F, Q, Case, When, Value, Func, Count, Sum, FloatField, CharField
from django.db.models.functions import Coalesce
from hul.constants import ADMIN_PAGE_SIZE
from orders.models import DistributorOrder, AlliancePartnerOrder, DistributorOrderDetail
from hul.choices import OrderStatus
from hul.utility import MOC


class RspLevelFilter(object):
    '''
    rsp level filter
    '''
    @staticmethod
    def get_filtered_data(request_filter_list):
        ''' advanced filter logic '''
        sales_queryset = RspLevelFilter._get_ordered_sql(request_filter_list)
        eco_queryset = RspLevelFilter._get_eco_sql(request_filter_list)
        return sales_queryset, eco_queryset

    # @staticmethod
    # def _get_ordered_sql(request_filter_list, status):
    #     queryset = DistributorOrder.objects.filter(order_status__in=[1,5])
    #     start_date = request_filter_list.get('start_date', None)
    #     end_date = request_filter_list.get('end_date', None)
    #     sales_promoter = request_filter_list.get('sales_promoter', None)

    #     if start_date:
    #         queryset = queryset.filter(created__gte=start_date)
    #     if end_date:
    #         queryset = queryset.filter(created__lte=end_date)
    #     if sales_promoter:
    #         queryset = queryset.filter(sales_promoter_id=sales_promoter)

    #     order_data =  queryset.order_by('created')

    #     mocdata = MOC.calculate_moc(start_date, end_date, order_data)

    #     return mocdata

    @staticmethod
    def _get_ordered_sql(request_filter_list):
        queryset = DistributorOrder.objects.filter(order_status__in=(1, 5))
        start_date = request_filter_list.get('start_date', None)
        end_date = request_filter_list.get('end_date', None)
        sales_promoter = request_filter_list.get('sales_promoter', None)

        if start_date:
            queryset = queryset.filter(created__gte=start_date)
        if end_date:
            queryset = queryset.filter(created__lte=end_date)
        if sales_promoter:
            queryset = queryset.filter(sales_promoter_id=sales_promoter)

        return queryset.annotate(sales=Count('sales_promoter_id')
                                 ).values('sales').annotate(
            ordered=Coalesce(Sum(
                Case(When(order_status=OrderStatus.ORDERED, then=F('total_amount')),
                     output_field=FloatField())
            ), 0),
            dispatched=Coalesce(Sum(
                Case(When(order_status=OrderStatus.DISPATCHED, then=F('total_amount')),
                     output_field=FloatField())
            ), 0),
            grandtotal=Coalesce(Sum(
                Case(When(order_status__in=(OrderStatus.ORDERED, OrderStatus.DISPATCHED), then=F('total_amount')),
                     output_field=FloatField())
            ), 0)
        ).values('sales', 'ordered', 'dispatched', 'grandtotal', 'sales_promoter__name')

    @staticmethod
    def _get_eco_sql(request_filter_list):
        queryset = DistributorOrder.objects.filter(order_status__in=(1, 5))
        start_date = request_filter_list.get('start_date', None)
        end_date = request_filter_list.get('end_date', None)
        sales_promoter = request_filter_list.get('sales_promoter', None)

        if start_date:
            queryset = queryset.filter(created__gte=start_date)
        if end_date:
            queryset = queryset.filter(created__lte=end_date)
        if sales_promoter:
            queryset = queryset.filter(sales_promoter_id=sales_promoter)

        return queryset.annotate(sales=Count('shakti_enterpreneur_id', distinct=True)
                                 ).values('sales').annotate(
            ordered=Count(
                Case(When(order_status=OrderStatus.ORDERED, then=F('total_amount')),
                     output_field=FloatField())
            ),
            dispatched=Count(
                Case(When(order_status=OrderStatus.DISPATCHED, then=F('total_amount')),
                     output_field=FloatField())
            ),
            grandtotal=Count(
                Case(When(order_status__in=(OrderStatus.ORDERED, OrderStatus.DISPATCHED), then=F('total_amount')),
                     output_field=FloatField())
            )
        ).values('sales', 'ordered', 'dispatched', 'grandtotal', 'sales_promoter__name')


class OrderAdvanceFilter(object):
    ''' Advanced Filter '''

    OLD_ALIANCE_FILTER_RAW_SQL = ''' SELECT apo.id as id, apo.invoice_number as invoice_number,
    apo.order_status as order_status, aua.name as alliance_name, aurd.name as distributor_name,
    aursp.name as rsp_name, ause.name as shakti_enterpreneur_name, apo.total_amount as total_amount,
    apod.price as item_price, apo.created as created, apo.payment_status as payment_status,
    apod.item_status, apod.dispatch_quantity as dispatch_quantity, apod.quantity, pp.basepack_name as basepack_name,
    asse.code as shakti_enterpreneur_code
    FROM orders_alliancepartnerorder as apo
    LEFT JOIN orders_alliancepartnerorderdetail as apod ON (apod.alliance_partner_order_id = apo.id)
    LEFT JOIN orders_distributororderdetail as dod ON (dod.id = apod.distributor_order_detail_id)
    LEFT JOIN orders_distributororder as dto ON (dto.id = dod.distributor_order_id)
    LEFT JOIN product_product as pp ON (pp.id = apod.product_id)
    LEFT JOIN app_user as aurd ON (aurd.id = apo.distributor_id)
    LEFT JOIN app_user as aua ON (aua.id = apo.alliance_id)
    LEFT JOIN app_user as ause ON (ause.id = dto.shakti_enterpreneur_id)
    LEFT JOIN app_shaktientrepreneur as asse ON (ause.id = asse.user_id)
    LEFT JOIN app_user as aursp ON (aursp.id= dto.sales_promoter_id)'''

    _ALIANCE_FILTER_RAW_SQL = ''' SELECT apo.id as id, apo.invoice_number as invoice_number,
    apo.order_status as order_status, aua.name as alliance_name, aurd.name as distributor_name,
     apo.total_amount as total_amount,
    apod.price as item_price, apo.created as created, apo.payment_status as payment_status,
    apod.item_status, apod.dispatch_quantity as dispatch_quantity, apod.quantity, pp.basepack_name as basepack_name,
    apod.price - apod.discount_amount + apod.sgst_amount + apod.cgst_amount + apod.igst_amount as net_amount
    FROM orders_alliancepartnerorder as apo
    LEFT JOIN orders_alliancepartnerorderdetail as apod ON (apod.alliance_partner_order_id = apo.id)
    LEFT JOIN product_product as pp ON (pp.id = apod.product_id)
    LEFT JOIN app_user as aurd ON (aurd.id = apo.distributor_id)
    LEFT JOIN app_user as aua ON (aua.id = apo.alliance_id)'''

    _DISTRIBUTOR_FILTER_RAW_SQL = ''' SELECT dto.id as id, dto.invoice_number as invoice_number,
    dto.order_status as order_status, aua.name as alliance_name, aurd.name as distributor_name,
    aursp.name as rsp_name, ause.name as shakti_enterpreneur_name, dto.total_amount as total_amount,
    dod.price as item_price, dod.created as created, dto.payment_status as payment_status,
    dod.item_status, dod.dispatch_quantity as dispatch_quantity, dod.quantity, pp.basepack_name as basepack_name,
    asse.code as shakti_enterpreneur_code,
    dod.net_amount as net_amount
    FROM orders_distributororder as dto
    LEFT JOIN orders_distributororderdetail as dod ON (dod.distributor_order_id = dto.id)
    LEFT JOIN product_product as pp ON (pp.id = dod.product_id)
    LEFT JOIN app_alliancepartner as ap ON (ap.id = pp.brand_id)
    LEFT JOIN app_user as ause ON (ause.id = dto.shakti_enterpreneur_id)
    LEFT JOIN app_shaktientrepreneur as asse ON (ause.id = asse.user_id)
    LEFT JOIN app_user as aursp ON (aursp.id = dto.sales_promoter_id)
    LEFT JOIN app_user as aurd ON (aurd.id = dto.distributor_id)
    LEFT JOIN app_user as aua ON (aua.id = ap.user_id) '''

    ALIANCE_ORDER_QUERY = '1'
    DISTRIBUTOR_ORDER_QUERY = '2'

    @staticmethod
    def dictfetchall(cursor):
        "Return all rows from a cursor as a dict"
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]

    @staticmethod
    def get_filtered_data(request_filter_list):
        ''' advanced filter logic '''
        if request_filter_list.get('order_type', None) == OrderAdvanceFilter.ALIANCE_ORDER_QUERY:
            sql, filters = OrderAdvanceFilter._get_alliance_sql(
                request_filter_list)
            queryset = AlliancePartnerOrder.objects.raw(sql, filters)

        else:
            sql, filters = OrderAdvanceFilter._get_distributor_sql(
                request_filter_list)
            queryset = DistributorOrder.objects.raw(sql, filters)

        return queryset

    @staticmethod
    def _get_alliance_sql(request_filter_list):
        start_amount = request_filter_list.get('start_amount', None)
        end_amount = request_filter_list.get('end_amount', None)
        start_date = request_filter_list.get('start_date', None)
        end_date = request_filter_list.get('end_date', None)
        payment_status = request_filter_list.get('payment_status', None)
        order_status = request_filter_list.get('order_status_ap', None)

        filters = []
        sql = OrderAdvanceFilter._ALIANCE_FILTER_RAW_SQL
        sql += ' WHERE 1=1'
        if request_filter_list.get('order_number', None):
            sql += " and %s LIKE '%%' || apo.invoice_number || '%%' "
            filters.append('%' + request_filter_list.get('order_number') + '%')
        if request_filter_list.get('brand', None):
            sql += ' and apo.alliance_id = %s'
            filters.append(request_filter_list.get('brand'))

        if request_filter_list.get('redistribution_stockist', None):
            sql += ' and apo.distributor_id = %s'
            filters.append(request_filter_list.get('redistribution_stockist'))

        if start_amount:
            sql += ' and apod.price >= %s'
            filters.append(int(start_amount))
        if end_amount:
            sql += ' and apod.price <= %s'
            filters.append(int(end_amount))

        if start_date:
            sql += ' and apo.created::date >= %s'
            filters.append(start_date)
        if end_date:
            sql += ' and apo.created::date <= %s'
            filters.append(end_date)
        if order_status:
            sql += 'and order_status = %s '
            sql += 'and item_status = %s '
            filters.append(order_status)
            filters.append(order_status)
        if payment_status:
            sql += 'and payment_status = %s '
            filters.append(payment_status)

        sql += ' ORDER BY apo.id DESC'

        return sql, filters

    @staticmethod
    def _get_distributor_sql(request_filter_list):
        ''' get distributor sql '''
        start_amount = request_filter_list.get('start_amount', None)
        end_amount = request_filter_list.get('end_amount', None)
        start_date = request_filter_list.get('start_date', None)
        end_date = request_filter_list.get('end_date', None)
        payment_status = request_filter_list.get('payment_status', None)
        order_status = request_filter_list.get('order_status', None)

        filters = []
        sql = OrderAdvanceFilter._DISTRIBUTOR_FILTER_RAW_SQL
        sql += ' WHERE 1=1'
        if request_filter_list.get('order_number', None):
            sql += " and %s LIKE '%%' || dto.invoice_number || '%%' "
            filters.append('%' + request_filter_list.get('order_number') + '%')
        if request_filter_list.get('brand', None):
            sql += ' and ap.user_id = %s'
            filters.append(request_filter_list.get('brand'))

        if request_filter_list.get('redistribution_stockist', None):
            sql += ' and dto.distributor_id = %s'
            filters.append(request_filter_list.get('redistribution_stockist'))

        if request_filter_list.get('sales_promoter', None):
            sql += ' and dto.sales_promoter_id = %s'
            filters.append(request_filter_list.get('sales_promoter'))

        if request_filter_list.get('shakti_enterpreneur', None):
            sql += ' and dto.shakti_enterpreneur_id = %s'
            filters.append(request_filter_list.get('shakti_enterpreneur'))

        if start_amount:
            sql += ' and dod.price >= %s'
            filters.append(int(start_amount))
        if end_amount:
            sql += ' and dod.price <= %s'
            filters.append(int(end_amount))

        if start_date:
            sql += ' and dod.created::date >= %s'
            filters.append(start_date)
        if end_date:
            sql += ' and dod.created::date <= %s'
            filters.append(end_date)
        if order_status:
            sql += 'and order_status = %s '
            sql += 'and item_status = %s '
            filters.append(order_status)
            filters.append(order_status)
        if payment_status:
            sql += 'and payment_status = %s '
            filters.append(payment_status)

        sql += ' ORDER BY dto.id DESC'

        return sql, filters


class SeLevelFilter(object):
    '''
    rse level filter
    '''
    @staticmethod
    def get_filtered_data(request_filter_list):
        ''' advanced filter logic '''
        order_queryset = SeLevelFilter._get_ordered_sql(request_filter_list)
        return order_queryset

    @staticmethod
    def _get_ordered_sql(request_filter_list):
        queryset = DistributorOrder.objects.filter()
        start_date = request_filter_list.get('start_date', None)
        end_date = request_filter_list.get('end_date', None)

        if start_date:
            queryset = queryset.filter(created__gte=start_date)
        if end_date:
            queryset = queryset.filter(created__lte=end_date)

        data = queryset.values('distributor_order_details__distributor_order'
                               ).annotate(
            tamount=Coalesce(Sum(
                Case(When(order_status__in=(OrderStatus.ORDERED, OrderStatus.DISPATCHED), then=F('total_amount')),
                     output_field=FloatField())
            ), 0),
            ordered=Coalesce(
                Sum(Case(When(order_status=OrderStatus.ORDERED, then=1)),  output_field=FloatField()), 0),
            dispatched=Coalesce(Sum(
                Case(When(order_status=OrderStatus.DISPATCHED, then=F('total_amount')),
                     output_field=FloatField())
            ), 0),
            lines=Count(
                Case(When(order_status__in=[OrderStatus.DISPATCHED, OrderStatus.ORDERED], then=1),
                     output_field=CharField())
            ),
            orderedlines=Count(
                Case(When(order_status=OrderStatus.ORDERED, then=1),
                     output_field=CharField())
            ),
            dispatchedlines=Count(
                Case(When(order_status=OrderStatus.DISPATCHED, then=1),
                     output_field=CharField())
            ),
        ).values('tamount', 'ordered', 'dispatched', 'orderedlines', 'dispatchedlines', 'distributor__name', 'lines', 'sales_promoter__name',
                 'shakti_enterpreneur__name', 'shakti_enterpreneur__shakti_user__code')

        # queryset.values('distributor_order_details__distributor_order'
        #                 ).annotate(lines=Count('distributor_order_details__distributor_order')
        #                            ).values('lines').annotate(
        #     tamount=Coalesce(
        #         Sum('distributor_order_details__net_amount'), 0),
        #     ordered=Coalesce(
        #         Sum(Case(When(order_status=OrderStatus.ORDERED, then=1)),  output_field=FloatField()), 0)
        # ).values('tamount', 'ordered', 'distributor__name', 'lines', 'sales_promoter__name',
        #          'shakti_enterpreneur__name', 'shakti_enterpreneur__shakti_user__code')
        # import pdb
        # pdb.set_trace()

        return data


class BasepkLevelFilter(object):
    '''
    rse level filter
    '''
    @staticmethod
    def get_filtered_data(request_filter_list):
        ''' advanced filter logic '''
        order_queryset = BasepkLevelFilter._get_ordered_sql(
            request_filter_list)
        return order_queryset

    @staticmethod
    def _get_ordered_sql(request_filter_list):
        queryset = DistributorOrderDetail.objects.filter()
        start_date = request_filter_list.get('start_date', None)
        end_date = request_filter_list.get('end_date', None)

        if start_date:
            queryset = queryset.filter(created__gte=start_date)
        if end_date:
            queryset = queryset.filter(created__lte=end_date)

        return queryset.values('product__basepack_name', 'distributor_order__distributor__name',
                               'distributor_order__sales_promoter__name',
                               ).annotate(tamount=Coalesce(Sum('net_amount'), 0)
                                          ).values('tamount', 'distributor_order__distributor__name',
                                                   'distributor_order__sales_promoter__name',
                                                   'product__basepack_name',
                                                   )


class BasepkLevelFormatFilter(object):
    '''
    rse level filter
    '''
    @staticmethod
    def get_filtered_data(request_filter_list):
        ''' advanced filter logic '''
        order_queryset = BasepkLevelFormatFilter._get_ordered_sql(
            request_filter_list)
        return order_queryset

    @staticmethod
    def _get_ordered_sql(request_filter_list):
        queryset = DistributorOrderDetail.objects.filter()
        start_date = request_filter_list.get('start_date', None)
        end_date = request_filter_list.get('end_date', None)

        if start_date:
            queryset = queryset.filter(created__gte=start_date)
        if end_date:
            queryset = queryset.filter(created__lte=end_date)

        return queryset.values('product__basepack_name'
                               ).annotate(tamount=Coalesce(Sum('net_amount'), 0)
                                          ).values('tamount',
                                                   'product__basepack_name',
                                                   )


class BillCountFilter(object):
    '''
    rse level filter
    '''
    @staticmethod
    def get_filtered_data(request_filter_list):
        ''' advanced filter logic '''
        order_queryset = BillCountFilter._get_ordered_sql(request_filter_list)
        return order_queryset

    @staticmethod
    def _get_ordered_sql(request_filter_list):
        queryset = DistributorOrder.objects.filter()
        start_date = request_filter_list.get('start_date', None)
        end_date = request_filter_list.get('end_date', None)

        if start_date:
            queryset = queryset.filter(created__gte=start_date)
        if end_date:
            queryset = queryset.filter(created__lte=end_date)

        return queryset.values('distributor_order_details__distributor_order'
                               ).annotate(lines=Count('distributor_order_details__distributor_order')
                                          ).values('lines').annotate(tamount=Coalesce(Sum('distributor_order_details__net_amount'), 0)
                                                                     ).values('lines', 'tamount'
                                                                              ).annotate(unique_prd=Count('distributor_order_details__product', distinct=True)
                                                                                         ).values('tamount', 'lines', 'unique_prd'
                                                                                                  ).annotate(billcount=Count('invoice_number', distinct=True)
                                                                                                             ).values('unique_prd', 'billcount', 'tamount',
                                                                                                                      'distributor__name', 'lines',
                                                                                                                      'sales_promoter__name', 'shakti_enterpreneur__name',
                                                                                                                      'shakti_enterpreneur__shakti_user__code')


class RsLevelFilter(object):
    '''
    rsp level filter
    '''
    @staticmethod
    def get_filtered_data(request_filter_list):
        ''' advanced filter logic '''
        sales_queryset = RsLevelFilter._get_ordered_sql(request_filter_list)
        eco_queryset = RsLevelFilter._get_eco_sql(request_filter_list)
        return sales_queryset, eco_queryset

    @staticmethod
    def _get_ordered_sql(request_filter_list):
        queryset = DistributorOrder.objects.filter(order_status__in=(1, 5))
        start_date = request_filter_list.get('start_date', None)
        end_date = request_filter_list.get('end_date', None)
        distributor = request_filter_list.get('redistribution_stockist', None)

        if start_date:
            queryset = queryset.filter(created__gte=start_date)
        if end_date:
            queryset = queryset.filter(created__lte=end_date)
        if distributor:
            queryset = queryset.filter(distributor_id=distributor)

        return queryset.annotate(sales=Count('distributor_id')
                                 ).values('sales').annotate(
            ordered=Coalesce(Sum(
                Case(When(order_status=OrderStatus.ORDERED, then=F('total_amount')),
                     output_field=FloatField())
            ), 0),
            dispatched=Coalesce(Sum(
                Case(When(order_status=OrderStatus.DISPATCHED, then=F('total_amount')),
                     output_field=FloatField())
            ), 0),
            grandtotal=Coalesce(Sum(
                Case(When(order_status__in=(OrderStatus.ORDERED, OrderStatus.DISPATCHED), then=F('total_amount')),
                     output_field=FloatField())
            ), 0)
        ).values('sales', 'ordered', 'dispatched', 'grandtotal', 'distributor__name')

    @staticmethod
    def _get_eco_sql(request_filter_list):
        queryset = DistributorOrder.objects.filter(order_status__in=(1, 5))
        start_date = request_filter_list.get('start_date', None)
        end_date = request_filter_list.get('end_date', None)
        distributor = request_filter_list.get('redistribution_stockist', None)

        if start_date:
            queryset = queryset.filter(created__gte=start_date)
        if end_date:
            queryset = queryset.filter(created__lte=end_date)
        if distributor:
            queryset = queryset.filter(distributor_id=distributor)

        return queryset.annotate(sales=Count('shakti_enterpreneur_id', distinct=True)
                                 ).values('sales').annotate(
            ordered=Count(
                Case(When(order_status=OrderStatus.ORDERED, then=F('total_amount')),
                     output_field=FloatField())
            ),
            dispatched=Count(
                Case(When(order_status=OrderStatus.DISPATCHED, then=F('total_amount')),
                     output_field=FloatField())
            ),
            grandtotal=Count(
                Case(When(order_status__in=(OrderStatus.ORDERED, OrderStatus.DISPATCHED), then=F('total_amount')),
                     output_field=FloatField())
            )
        ).values('sales', 'ordered', 'dispatched', 'grandtotal', 'distributor__name')
